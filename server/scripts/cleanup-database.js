#!/usr/bin/env node

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üßπ SCRIPT DE LIMPEZA DO BANCO DE DADOS');
console.log('=====================================');
console.log('');
console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° limpar os seguintes dados:');
console.log('   ‚ùå Todas as compras (purchases)');
console.log('   ‚ùå Todas as trocas (trades)');
console.log('   ‚ùå Todos os cupons (coupons)');
console.log('   ‚ùå Todos os itens do carrinho (card-orders)');
console.log('   ‚ùå Todas as mensagens do chat (chat-messages)');
console.log('   ‚ùå Todas as conversas do chat (chat-conversations)');
console.log('   ‚ùå Todos os artigos e conte√∫do adicional');
console.log('');
console.log('‚úÖ Os seguintes dados ser√£o PRESERVADOS:');
console.log('   üìö Produtos (quadrinhos)');
console.log('   üë• Clientes');
console.log('   üè† Endere√ßos dos clientes');
console.log('   üí≥ Cart√µes dos clientes');
console.log('   üë§ Usu√°rios');
console.log('   üõçÔ∏è Carrinhos vazios (para manter rela√ß√£o com clientes)');
console.log('   ‚öôÔ∏è Dados de sistema (status, categorias, etc.)');
console.log('');

rl.question('Tem certeza que deseja continuar? Digite "CONFIRMAR" para prosseguir: ', (answer) => {
  if (answer === 'CONFIRMAR') {
    console.log('');
    console.log('üöÄ Iniciando limpeza do banco de dados...');
    console.log('');
    
    try {
      // Fazer uma chamada HTTP para o endpoint de limpeza
      // Como estamos em um script, vamos usar curl
      const curlCommand = `curl -X POST http://localhost:1337/api/cleanupDatabase \\
        -H "Content-Type: application/json" \\
        --silent --show-error --fail`;
      
      console.log('üì° Enviando comando de limpeza para o servidor...');
      const result = execSync(curlCommand, { encoding: 'utf8' });
      
      const response = JSON.parse(result);
      
      if (response.success) {
        console.log('');
        console.log('üéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
        console.log('');
        console.log('üìä Dados removidos:');
        response.cleaned.forEach(item => {
          console.log(`   ‚ùå ${item}`);
        });
        console.log('');
        console.log('üìä Dados preservados:');
        response.preserved.forEach(item => {
          console.log(`   ‚úÖ ${item}`);
        });
        console.log('');
        console.log('‚ú® Banco de dados limpo e pronto para uso!');
      } else {
        console.error('‚ùå Erro na limpeza:', response.message || 'Erro desconhecido');
        process.exit(1);
      }
      
    } catch (error) {
      console.error('');
      console.error('‚ùå ERRO AO EXECUTAR LIMPEZA:');
      console.error('');
      
      if (error.message.includes('Connection refused')) {
        console.error('üîó O servidor Strapi n√£o est√° rodando.');
        console.error('   Execute: yarn develop ou yarn start');
      } else if (error.message.includes('404')) {
        console.error('üîç Endpoint n√£o encontrado.');
        console.error('   Verifique se o servidor foi atualizado com as novas rotas.');
      } else {
        console.error('üí• Erro t√©cnico:', error.message);
      }
      
      console.error('');
      process.exit(1);
    }
    
  } else {
    console.log('‚ùå Opera√ß√£o cancelada.');
    console.log('Nenhum dado foi modificado.');
  }
  
  rl.close();
});

// Instru√ß√µes de uso
console.log('üí° ANTES DE EXECUTAR:');
console.log('   1. Certifique-se de que o servidor Strapi est√° rodando');
console.log('   2. Execute: cd server && yarn develop');
console.log('   3. Aguarde o servidor inicializar completamente');
console.log('');